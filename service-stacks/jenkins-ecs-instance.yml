AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates a VPC containing an ECS cluster and Jenkins ECS service (and proxy to
  view Jenkins externally)
Parameters:
  StackName:
    Type: String
    Default: develop
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.medium
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
    ConstraintDescription: >-
      must be a general purpose (T2 or M4) EC2 instance type, equal to or larger
      than a "t2.small".
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Key pair to log into EC2 instances
    Default: develop
  PublicAccessCIDR:
    Type: String
    Description: >-
      CIDR block that will have access to AWS resources. Use
      http://checkip.amazonaws.com/ to get your current IP Address.
    AllowedPattern: \d+\.\d+\.\d+\.\d+/\d+
    Default: 0.0.0.0/0
Mappings:
  RegionAmazonECSOptimizedAMIMapping:
    us-east-1:
      AMI: ami-52cd5445
    us-west-1:
      AMI: ami-efa1e28f
    us-west-2:
      AMI: ami-a426edc4
    eu-west-1:
      AMI: ami-7b244e08
    eu-central-1:
      AMI: ami-721aec1d
    ap-northeast-1:
      AMI: ami-058a4964
    ap-southeast-1:
      AMI: ami-0d9f466e
    ap-southeast-2:
      AMI: ami-7df2c61e
Resources:
  ECSAutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref ECSLaunchConfig
      MaxSize: 2
      MinSize: 2
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
      - Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT5M
        WaitOnResourceSignals: 'true'
    Type: 'AWS::AutoScaling::AutoScalingGroup'
  ECSLaunchConfig:
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref ECSInstanceProfile
      ImageId: !FindInMap 
        - RegionAmazonECSOptimizedAMIMapping
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SecurityGroups:
        - !Ref ECSClusterSecurityGroup
        - !Ref ECSContainerInstancesSecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              set -ex
            - |
              yum install -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '  --stack '
            - !Ref 'AWS::StackName'
            - '  --resource ECSLaunchConfig'
            - '  --region '
            - !Ref 'AWS::Region'
            - |+

            - echo ECS_CLUSTER=
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'ClusterName']]
            - |2
               >> /etc/ecs/ecs.config
            - |
              mkdir -p /mnt/efs
            - >
              aws_az="$(curl -s
              http://169.254.169.254/latest/meta-data/placement/availability-zone)"
            - |
              aws_region="${aws_az:0:${#aws_az}-1}"
            - 'echo "${aws_az}.'
            - !Ref EFSFileSystem
            - >
              .efs.${aws_region}.amazonaws.com:/    /mnt/efs   nfs4    defaults"
              >> /etc/fstab
            - |
              mount -a
            - |
              chmod -R 777 /mnt/efs
            - |
              service docker restart
            - |
              start ecs
            - '/opt/aws/bin/cfn-signal -e $? '
            - '  --stack '
            - !Ref 'AWS::StackName'
            - '  --resource ECSAutoScalingGroup'
            - '  --region '
            - !Ref 'AWS::Region'
            - |+

    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            /etc/nginx/nginx.conf:
              content: !Join 
                - ''
                - - |
                    events {
                  - |2
                      worker_connections 1024;
                  - |
                    }
                  - |
                    http {
                  - |2
                      server {
                  - |2
                        location / {
                  - '      proxy_pass http://'
                  - !GetAtt 
                    - JenkinsLoadBalancer
                    - DNSName
                  - |
                    ;
                  - |2
                          proxy_read_timeout 90;
                  - |2
                          proxy_redirect default;
                  - |2
                          proxy_set_header Host $host:$server_port;
                  - |2
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  - |2
                          proxy_set_header X-Real-IP $remote_addr;
                  - |2
                        }
                  - |2
                      }
                  - |
                    }
              mode: '000644'
              owner: root
              group: root
          packages:
            yum:
              nfs-utils: []
    Type: 'AWS::AutoScaling::LaunchConfiguration'
  ECSClusterSecurityGroup:
    Properties:
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]
      GroupDescription: >-
        Self-referencing security group to allow all traffic between ECS
        container instances and ELBs
    Type: 'AWS::EC2::SecurityGroup'
  ECSClusterSecurityGroupEgress:
    Properties:
      DestinationSecurityGroupId: !Ref ECSClusterSecurityGroup
      FromPort: '-1'
      GroupId: !Ref ECSClusterSecurityGroup
      IpProtocol: '-1'
      ToPort: '-1'
    Type: 'AWS::EC2::SecurityGroupEgress'
  ECSClusterSecurityGroupIngress:
    Properties:
      FromPort: '-1'
      GroupId: !Ref ECSClusterSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ECSClusterSecurityGroup
      ToPort: '-1'
    Type: 'AWS::EC2::SecurityGroupIngress'
  ECSContainerInstancesSecurityGroup:
    Properties:
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]
      GroupDescription: Security group for ECS container instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref PublicAccessCIDR
    Type: 'AWS::EC2::SecurityGroup'
  EFSMountTargetSecurityGroup:
    Properties:
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]
      GroupDescription: >-
        Security group to allow inbound NFS for EFS mount target from ECS
        container instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !Ref ECSContainerInstancesSecurityGroup
    Type: 'AWS::EC2::SecurityGroup'
  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemTags:
        - Key: Name
          Value:
            Fn::ImportValue:
              !Join [':', [!Ref 'StackName', 'ClusterName']]
      PerformanceMode: generalPurpose
  EFSMountTarget1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !Ref EFSMountTargetSecurityGroup
      SubnetId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
  EFSMountTarget2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !Ref EFSMountTargetSecurityGroup
      SubnetId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']] 
  ECSInstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref ECSInstanceRole
    Type: 'AWS::IAM::InstanceProfile'
  ECSInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonEC2ContainerServiceforEC2Role
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: AmazonEC2ContainerServiceJenkinsPluginRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:DescribeContainerInstances'
                  - 'ecs:ListClusters'
                  - 'ecs:RegisterTaskDefinition'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecs:RunTask'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:ecs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':task-definition/jenkins-slave:*'
              - Effect: Allow
                Action:
                  - 'ecs:ListContainerInstances'
                  - 'ecs:StopTask'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:ecs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':cluster/'
                    - Fn::ImportValue:
                        !Join [':', [!Ref 'StackName', 'ClusterName']]
              - Effect: Allow
                Action:
                  - 'ecs:StopTask'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:ecs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':task/*'
    Type: 'AWS::IAM::Role'
  ECSServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonEC2ContainerServiceRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:Describe*'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                Resource: '*'
    Type: 'AWS::IAM::Role'
  JenkinsLoadBalancer:
    Properties:
      Subnets:
        - Fn::ImportValue:
            !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
        - Fn::ImportValue:
            !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      Scheme: internal
      SecurityGroups:
        - !Ref ECSClusterSecurityGroup
      Listeners:
        - InstancePort: '8080'
          InstanceProtocol: HTTP
          LoadBalancerPort: '80'
          Protocol: HTTP
        - InstancePort: '50000'
          InstanceProtocol: TCP
          LoadBalancerPort: '50000'
          Protocol: TCP
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '30'
        Target: 'HTTP:8080/'
        Timeout: '5'
        UnhealthyThreshold: '5'
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
  ProxyELBSecurityGroup:
    Properties:
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]
      GroupDescription: Proxy ELB security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref PublicAccessCIDR
    Type: 'AWS::EC2::SecurityGroup'
  ProxyLoadBalancer:
    Properties:
      Subnets:
        - Fn::ImportValue:
            !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
        - Fn::ImportValue:
            !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      SecurityGroups:
        - !Ref ECSClusterSecurityGroup
        - !Ref ProxyELBSecurityGroup
      Listeners:
        - InstancePort: '80'
          InstanceProtocol: HTTP
          LoadBalancerPort: '80'
          Protocol: HTTP
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '30'
        Target: 'HTTP:80/'
        Timeout: '5'
        UnhealthyThreshold: '5'
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
  JenkinsECSService:
    Properties:
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: jenkins
          ContainerPort: '8080'
          LoadBalancerName: !Ref JenkinsLoadBalancer
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref JenkinsTaskDefinition
    Type: 'AWS::ECS::Service'
  JenkinsTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Name: jenkins
          Image: jenkins
          Hostname: jenkins
          Cpu: 512
          Memory: 512
          Environment:
            - Name: JAVA_OPTS
              Value: '-Djenkins.install.runSetupWizard=false'
          Essential: true
          MountPoints:
            - ContainerPath: /var/jenkins_home
              SourceVolume: efs-jenkins
          PortMappings:
            - HostPort: 8080
              ContainerPort: 8080
            - HostPort: 50000
              ContainerPort: 50000
      Volumes:
        - Name: efs-jenkins
          Host:
            SourcePath: /mnt/efs
    Type: 'AWS::ECS::TaskDefinition'
  ProxyECSService:
    Properties:
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: '80'
          LoadBalancerName: !Ref ProxyLoadBalancer
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref ProxyTaskDefinition
    Type: 'AWS::ECS::Service'
  ProxyTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Name: nginx
          Image: nginx
          Hostname: nginx
          Cpu: 256
          Memory: 256
          Essential: true
          MountPoints:
            - ContainerPath: /etc/nginx/nginx.conf
              SourceVolume: nginx-conf
              ReadOnly: true
          PortMappings:
            - HostPort: 80
              ContainerPort: 80
      Volumes:
        - Name: nginx-conf
          Host:
            SourcePath: /etc/nginx/nginx.conf
    Type: 'AWS::ECS::TaskDefinition'
Outputs:
  JenkinsConfigurationAlternativeJenkinsURL:
    Description: 'Jenkins configuration: "Alternative Jenkins URL"'
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - JenkinsLoadBalancer
          - DNSName
        - /
  JenkinsConfigurationECSCluster:
    Description: 'Jenkins configuration: "ECS Cluster"'
    Value: !Join 
      - ''
      - - 'arn:aws:ecs:'
        - !Ref 'AWS::Region'
        - ':'
        - !Ref 'AWS::AccountId'
        - ':cluster/'
        - Fn::ImportValue:
            !Join [':', [!Ref 'StackName', 'ClusterName']]
  PublicJenkinsURL:
    Description: URL of proxy used to view Jenkins externally
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ProxyLoadBalancer
          - DNSName
        - /
